19a20
> -- In km/h...
21,39c22,40
<   ["motorway"] = 90,
<   ["motorway_link"] = 45,
<   ["trunk"] = 85,
<   ["trunk_link"] = 40,
<   ["primary"] = 65,
<   ["primary_link"] = 30,
<   ["secondary"] = 55,
<   ["secondary_link"] = 25,
<   ["tertiary"] = 40,
<   ["tertiary_link"] = 20,
<   ["unclassified"] = 25,
<   ["residential"] = 25,
<   ["living_street"] = 10,
<   ["service"] = 15,
< --  ["track"] = 5,
<   ["ferry"] = 5,
<   ["movable"] = 5,
<   ["shuttle_train"] = 10,
<   ["default"] = 10
---
> --  ["motorway"] = 80.5,
> --  ["motorway_link"] = 80.5,
> --  ["trunk"] = 32.2,
> --  ["trunk_link"] = 3.2,
>   ["primary"] = 2.0,
>   ["primary_link"] = 0.6,
>   ["secondary"] = 1.5,
>   ["secondary_link"] = 0.4,
>   ["tertiary"] = 1.5,
>   ["tertiary_link"] = 0.5,
>   ["unclassified"] = 1.0,
>   ["residential"] = 1.0,
> --  ["living_street"] = 4.8,
> --  ["service"] = 64.4,
> --  ["track"] = 8.0,
> --  ["ferry"] = 8.0,
> --  ["movable"] = 8.0,
> --  ["shuttle_train"] = 16.1,
>   ["default"] = 2.0
564,585c565,586
<   -- scale speeds to get better avg driving times
<   if result.forward_speed > 0 then
<     local scaled_speed = result.forward_speed*speed_reduction + 11
<     local penalized_speed = math.huge
<     if service and service ~= "" and service_speeds[service] then
<       penalized_speed = service_speeds[service]
<     elseif width <= 3 or (lanes <= 1 and is_bidirectional) then
<       penalized_speed = result.forward_speed / 2
<     end
<     result.forward_speed = math.min(penalized_speed, scaled_speed)
<   end
< 
<   if result.backward_speed > 0 then
<     local scaled_speed = result.backward_speed*speed_reduction + 11
<     local penalized_speed = math.huge
<     if service and service ~= "" and service_speeds[service]then
<       penalized_speed = service_speeds[service]
<     elseif width <= 3 or (lanes <= 1 and is_bidirectional) then
<       penalized_speed = result.backward_speed / 2
<     end
<     result.backward_speed = math.min(penalized_speed, scaled_speed)
<   end
---
> --  -- scale speeds to get better avg driving times
> --  if result.forward_speed > 0 then
> --    local scaled_speed = result.forward_speed*speed_reduction + 11
> --    local penalized_speed = math.huge
> --    if service and service ~= "" and service_speeds[service] then
> --      penalized_speed = service_speeds[service]
> --    elseif width <= 3 or (lanes <= 1 and is_bidirectional) then
> --      penalized_speed = result.forward_speed / 2
> --    end
> --    result.forward_speed = math.min(penalized_speed, scaled_speed)
> --  end
> 
> --  if result.backward_speed > 0 then
> --    local scaled_speed = result.backward_speed*speed_reduction + 11
> --    local penalized_speed = math.huge
> --    if service and service ~= "" and service_speeds[service]then
> --      penalized_speed = service_speeds[service]
> --    elseif width <= 3 or (lanes <= 1 and is_bidirectional) then
> --      penalized_speed = result.backward_speed / 2
> --    end
> --    result.backward_speed = math.min(penalized_speed, scaled_speed)
> --  end
